generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model UserType {
  id            String @id @default(uuid())
  name          String
  user_default  Boolean @default(false)
  admin_default Boolean @default(false)

  users User[]

  @@map("types")
}

model UserAction {
  id   String @id @default(uuid())
  name String

  logs UserLog[]

  @@map("actions")
}

model User {
  id              String   @id @default(uuid())
  name            String
  email           String
  password        String
  image           String
  created_at      DateTime @default(now())
  update_at       DateTime @default(now())
  activated       Boolean  @default(false)
  blocked         Boolean  @default(false)
  change_password Boolean  @default(true)
  auth0_id        String?  @unique

  type_id         String
  type            UserType @relation(fields: [type_id], references: [id])

  keys            UserKey[]
  userLogs        UserLog[] @relation("UserLogUser")
  userReferences  UserLog[] @relation("UserLogReference")
  userItem        activityItem[] @relation("UserActivityItem")
  userCategory    activityCategory[] @relation("UserActivityCategory")

  @@map("users")
}

model UserKey {
  id          String   @id @default(uuid())
  key         String
  created_at  DateTime @default(now())
  expired_at  DateTime
  activated   Boolean
  validated   Boolean  @default(false)

  user_id     String
  user        User     @relation(fields: [user_id], references: [id])

  @@map("keys")
}

model UserLog {
  id              String      @id @default(uuid())
  created_at      DateTime?   @default(now())
  request_ip      String

  user_action     String
  userAction      User        @relation("UserLogUser", fields: [user_action], references: [id])

  action_id       String
  action          UserAction  @relation(fields: [action_id], references: [id])

  user_reference  String
  userReference   User        @relation("UserLogReference", fields: [user_reference], references: [id])

  @@map("logs")
}

model activityCategory {
  id            String @id @default(uuid())
  description   String
  created_at    DateTime @default(now())
  updated_at    DateTime

  user_id         String
  userCategory    User        @relation("UserActivityCategory", fields: [user_id], references: [id])


  items activityItem[]

  @@map("categories")
}

model activityItem {
  id              String   @id @default(uuid())
  description     String
  dt_inicial      DateTime @default(now())
  dt_final        DateTime @default(now())
  created_at      DateTime @default(now())
  update_at       DateTime @default(now())
  finalized       Boolean  @default(false)

  category_id     String
  category        activityCategory @relation(fields: [category_id], references: [id])

  user_id         String
  userItem        User     @relation("UserActivityItem", fields: [user_id], references: [id])

  @@map("items")
}